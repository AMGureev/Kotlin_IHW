Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"305b20b7-14d2-46a0-a3f0-de78395dd8ec\" name=\"Changes\" comment=\"This is the end...?\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ExternalProjectsData\">\n    <projectState path=\"$PROJECT_DIR$\">\n      <ProjectState />\n    </projectState>\n  </component>\n  <component name=\"ExternalProjectsManager\">\n    <system id=\"GRADLE\">\n      <state>\n        <projects_view>\n          <tree_state>\n            <expand />\n            <select />\n          </tree_state>\n        </projects_view>\n      </state>\n    </system>\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n        <option value=\"Kotlin Data Class\" />\n        <option value=\"Kotlin Interface\" />\n        <option value=\"Kotlin Class\" />\n        <option value=\"UML Object\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"a94de27339f419ac9daeb9468eb1cd700c074382\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"UPDATE_TYPE\" value=\"REBASE\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;AMGureev&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">\n    <option name=\"selectedUrlAndAccountId\">\n      <UrlAndAccount>\n        <option name=\"accountId\" value=\"7e264211-c685-440e-90b1-c171dc07e14c\" />\n        <option name=\"url\" value=\"https://github.com/AMGureev/Kotlin_IHW.git\" />\n      </UrlAndAccount>\n    </option>\n  </component>\n  <component name=\"HighlightingSettingsPerFile\">\n    <setting file=\"jar://$USER_HOME$/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.module/jackson-module-kotlin/2.13.0/9870e0689d0d6478656c995cc150bd80ab46f27c/jackson-module-kotlin-2.13.0-sources.jar!/com/fasterxml/jackson/module/kotlin/Extensions.kt\" root0=\"SKIP_INSPECTION\" />\n  </component>\n  <component name=\"ProblemsViewState\">\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 0\n}</component>\n  <component name=\"ProjectId\" id=\"2ZRBp3QFSyncsBPhVfUANBkupI0\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"ASKED_ADD_EXTERNAL_FILES\": \"true\",\n    \"DefaultPlantUmlFileTemplate\": \"UML Object\",\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\n    \"WebServerToolWindowFactoryState\": \"false\",\n    \"git-widget-placeholder\": \"b092e206\",\n    \"last_opened_file_path\": \"/Users/alexgureev/IdeaProjects/Kotlin_IHW/sessions\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"settings.editor.selected.configurable\": \"preferences.pluginManager\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/sessions\" />\n    </key>\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"MainKt\" type=\"JetRunConfigurationType\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"ru.hse.cinema.MainKt\" />\n      <module name=\"Kotlin_IHW.main\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Kotlin.MainKt\" />\n        <item itemvalue=\"Kotlin.MainKt\" />\n        <item itemvalue=\"Kotlin.MainKt\" />\n        <item itemvalue=\"Kotlin.MainKt\" />\n        <item itemvalue=\"Kotlin.MainKt\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"305b20b7-14d2-46a0-a3f0-de78395dd8ec\" name=\"Changes\" comment=\"\" />\n      <created>1702375192804</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1702375192804</updated>\n      <workItem from=\"1702408682902\" duration=\"5858000\" />\n      <workItem from=\"1702464033550\" duration=\"339000\" />\n      <workItem from=\"1702465101996\" duration=\"4608000\" />\n      <workItem from=\"1702481107558\" duration=\"1222000\" />\n      <workItem from=\"1702496575287\" duration=\"1255000\" />\n      <workItem from=\"1702500550716\" duration=\"5793000\" />\n      <workItem from=\"1702553497991\" duration=\"2873000\" />\n      <workItem from=\"1703150107819\" duration=\"1487000\" />\n      <workItem from=\"1703168747014\" duration=\"25415000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"create\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1702375230091</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1702375230091</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"first mini changes\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1702375522060</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1702375522060</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"second changes\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1702385749174</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1702385749174</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"third changes\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1702392355071</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1702392355071</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"fourth changes\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1702418399369</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1702418399369</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"fourth changes\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1702468542951</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1702468542951</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"first - looping in the search for free places&#10;second - changing the availability of a place does not work&#10;third - &#10;it can generate tickets for the session and create fields for them purchased not purchased\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1702506320849</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1702506320849</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"This is the end...?\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1703336772690</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1703336772690</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"9\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\n    <MESSAGE value=\"create\" />\n    <MESSAGE value=\"first mini changes\" />\n    <MESSAGE value=\"third  changes\" />\n    <MESSAGE value=\"second changes\" />\n    <MESSAGE value=\"third changes\" />\n    <MESSAGE value=\"fourth changes\" />\n    <MESSAGE value=\"first - looping in the search for free places&#10;second - changing the availability of a place does not work&#10;third - &#10;it can generate tickets for the session and create fields for them purchased not purchased\" />\n    <MESSAGE value=\"This is the end...?\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"This is the end...?\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <pin-to-top-manager>\n      <pinned-members>\n        <PinnedItemInfo parentTag=\"ru.hse.cinema.entity.SessionEntity\" memberName=\"places\" />\n        <PinnedItemInfo parentTag=\"ru.hse.cinema.dao.InMemorySessionDao\" memberName=\"sessions\" />\n        <PinnedItemInfo parentTag=\"java.util.ArrayList\" memberName=\"size\" />\n        <PinnedItemInfo parentTag=\"ru.hse.cinema.dao.InMemoryTicketDao\" memberName=\"soldTickets\" />\n      </pinned-members>\n    </pin-to-top-manager>\n  </component>\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\n    <expand />\n    <select />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -4,8 +4,9 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="305b20b7-14d2-46a0-a3f0-de78395dd8ec" name="Changes" comment="This is the end...?">
+    <list default="true" id="305b20b7-14d2-46a0-a3f0-de78395dd8ec" name="Changes" comment="Maybe now...?">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/kotlin/ru/hse/cinema/CinemaApp.kt" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/kotlin/ru/hse/cinema/CinemaApp.kt" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -80,22 +81,22 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "ASKED_ADD_EXTERNAL_FILES": "true",
-    "DefaultPlantUmlFileTemplate": "UML Object",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "WebServerToolWindowFactoryState": "false",
-    "git-widget-placeholder": "b092e206",
-    "last_opened_file_path": "/Users/alexgureev/IdeaProjects/Kotlin_IHW/sessions",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "settings.editor.selected.configurable": "preferences.pluginManager",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
+    &quot;DefaultPlantUmlFileTemplate&quot;: &quot;UML Object&quot;,
+    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;098af3a7&quot;,
+    &quot;last_opened_file_path&quot;: &quot;/Users/alexgureev/IdeaProjects/Kotlin_IHW/sessions&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
       <recent name="$PROJECT_DIR$/sessions" />
@@ -201,7 +202,15 @@
       <option name="project" value="LOCAL" />
       <updated>1703336772690</updated>
     </task>
-    <option name="localTasksCounter" value="9" />
+    <task id="LOCAL-00009" summary="Maybe now...?">
+      <option name="closed" value="true" />
+      <created>1703341182680</created>
+      <option name="number" value="00009" />
+      <option name="presentableId" value="LOCAL-00009" />
+      <option name="project" value="LOCAL" />
+      <updated>1703341182680</updated>
+    </task>
+    <option name="localTasksCounter" value="10" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -212,7 +221,19 @@
       <map>
         <entry key="MAIN">
           <value>
-            <State />
+            <State>
+              <option name="FILTERS">
+                <map>
+                  <entry key="branch">
+                    <value>
+                      <list>
+                        <option value="origin/detached3" />
+                      </list>
+                    </value>
+                  </entry>
+                </map>
+              </option>
+            </State>
           </value>
         </entry>
       </map>
@@ -228,7 +249,8 @@
     <MESSAGE value="fourth changes" />
     <MESSAGE value="first - looping in the search for free places&#10;second - changing the availability of a place does not work&#10;third - &#10;it can generate tickets for the session and create fields for them purchased not purchased" />
     <MESSAGE value="This is the end...?" />
-    <option name="LAST_COMMIT_MESSAGE" value="This is the end...?" />
+    <MESSAGE value="Maybe now...?" />
+    <option name="LAST_COMMIT_MESSAGE" value="Maybe now...?" />
   </component>
   <component name="XDebuggerManager">
     <pin-to-top-manager>
Index: src/main/kotlin/ru/hse/cinema/CinemaApp.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.hse.cinema\n\nimport ru.hse.cinema.dao.MovieDao\nimport ru.hse.cinema.dao.SessionDao\nimport ru.hse.cinema.dao.TicketDao\nimport ru.hse.cinema.entity.MovieEntity\nimport ru.hse.cinema.entity.SessionEntity\nimport ru.hse.cinema.entity.TicketEntity\nimport java.time.LocalDateTime\n\nclass CinemaApp(\n    private val movieDao: MovieDao,\n    private val ticketDao: TicketDao,\n    private val sessionDao: SessionDao,\n) {\n    // TODO В дальнейшем надо реализовать просмотр возможности редактирования продолжительность фильма (чтобы не повлияло на сессии)\n    private fun checkCorrectSessionTime(title: String, date: LocalDateTime): Boolean {\n        for (index in 0..<sessionDao.getAllSessions().size) {\n            if ((sessionDao.getAllSessions()[index].timeStart.plusMinutes(movieDao.returnMovieByName(title).duration.toLong()) > date && (date > sessionDao.getAllSessions()[index].timeStart)) || ((date < sessionDao.getAllSessions()[index].timeStart) && (date.plusMinutes(\n                    movieDao.returnMovieByName(title).duration.toLong()\n                ) > sessionDao.getAllSessions()[index].timeStart))\n            ) {\n                return false\n            }\n        }\n        return true\n    }\n\n    fun createSession(title: String, date: LocalDateTime) {\n        if (movieDao.isMovie(title)) {\n            if (checkCorrectSessionTime(title, date)) {\n                sessionDao.addSession(SessionEntity(sessionDao.getID(), movieDao.returnMovieByName(title), date))\n                println(\"The session has been created!\")\n            } else {\n                println(\"Error! - the session cannot be created due to a time conflict with other sessions\")\n            }\n        } else {\n            println(\"Error! - the movie does not exist\")\n        }\n    }\n\n    fun createMovie(title: String, time: Int) {\n        if (!movieDao.isMovie(title)) {\n            movieDao.addMovie(MovieEntity(title, time))\n            println(\"The movie has been created!\")\n        } else {\n            println(\"Error! - the movie with title already exists\")\n        }\n    }\n\n    fun buyTicket(id: Int, num: Int) {\n        if (sessionDao.isSession(id)) {\n            if (ticketDao.ticketIsSold(sessionDao.returnSessionById(id).tickets[num - 1])) {\n                println(\"The ticket is not available for sale!\")\n            } else {\n                ticketDao.sellTicket(sessionDao.returnSessionById(id).tickets[num - 1])\n                println(\"Congratulation! The ticket is available!\")\n            }\n        } else {\n            println(\"Error! - the session does not exist\")\n        }\n    }\n\n    fun returnTicket(id: Int, num: Int) {\n        if (sessionDao.isSession(id)) {\n            if (ticketDao.ticketIsSold(sessionDao.returnSessionById(id).tickets[num - 1])) {\n                if (sessionDao.returnSessionById(id).tickets[num - 1].activation) {\n                    println(\"Error! - you cannot refund the ticket as it has been activated\")\n                } else {\n                    ticketDao.returnTicket(sessionDao.returnSessionById(id).tickets[num - 1])\n                    println(\"The ticket has been successfully refunded! Your money will be credited to your card within 7 business days.\")\n                }\n            } else {\n                println(\"Error! - the ticket was not purchased\")\n            }\n        } else {\n            println(\"Error! - the session does not exist\")\n        }\n    }\n\n    fun returnTicketsById(id: Int, access: Boolean) {\n        if (sessionDao.isSession(id)) {\n            if (access) {\n                sessionDao.returnSessionById(id).tickets\n                val unsoldTickets = sessionDao.returnSessionById(id).tickets.filter { ticket ->\n                    ticket !in ticketDao.returnSoldTicketsById(id)\n                }\n                if (unsoldTickets.isEmpty()) {\n                    println(\"All tickets were purchased!\")\n                } else {\n                    println(\"List of available tickets:\")\n                    prettyTicketsOutput(unsoldTickets, false)\n                }\n            } else {\n                if (ticketDao.returnSoldTicketsById(id).isEmpty()) {\n                    println(\"All tickets are available for purchase!\")\n                } else {\n                    println(\"List of purchased tickets:\")\n                    prettyTicketsOutput(ticketDao.returnSoldTicketsById(id), true)\n                }\n            }\n        } else {\n            println(\"Error! - the session does not exist\")\n        }\n    }\n\n    fun activationTicket(id: Int, num: Int) {\n        if (num > 32 || num <= 0) {\n            println(\"Error! - the seat's number is not existing!\")\n        } else {\n            if (sessionDao.isSession(id)) {\n                if (sessionDao.returnSessionById(id).tickets[num - 1] in ticketDao.returnSoldTicketsById(id)) {\n                    if (sessionDao.returnSessionById(id).tickets[num - 1].activation) {\n                        println(\"Error! - attempting to activate the ticket again\")\n                    } else {\n                        ticketDao.activationTicket(sessionDao.returnSessionById(id).tickets[num - 1])\n                        println(\"The ticket has been successfully activated! Enjoy the show!\")\n                    }\n                } else {\n                    println(\"Error! - attempting to activate an unpurchased ticket! It seems someone is trying to hack you!\")\n                }\n            } else {\n                println(\"Error! - the session does not exist\")\n            }\n        }\n    }\n\n    fun editMovieInformation(oldTitle: String, newTitle: String, newDuration: Int) {\n        var newTitle = newTitle\n        var newDuration = newDuration\n        if (movieDao.isMovie(oldTitle)) {\n            if (movieDao.isMovie(newTitle)) {\n                println(\"Error! - a movie with this title already exists\")\n            } else {\n                if (newTitle == \"\") {\n                    newTitle = oldTitle\n                }\n                if (newDuration == 0) {\n                    newDuration = movieDao.returnMovieByName(oldTitle).duration\n                }\n                movieDao.editMovieInformation(movieDao.returnMovieByName(oldTitle), newTitle, newDuration)\n                println(\"Movie information has been successfully updated!\")\n            }\n        } else {\n            println(\"Error! - attempting to edit a non-exists movie\")\n        }\n    }\n\n    fun editSessionInformation(id: Int, newDate: LocalDateTime) {\n        if (sessionDao.isSession(id)) {\n            if (checkCorrectSessionTime(sessionDao.returnSessionById(id).movie.title, newDate)) {\n                sessionDao.editSession(sessionDao.returnSessionById(id), newDate)\n                println(\"Session information has been successfully updated!\")\n            } else {\n                println(\"Error! - the session cannot be updated due to a time conflict with other sessions\")\n            }\n        } else {\n            println(\"Error! - the session does not exist\")\n        }\n    }\n\n    fun saveAllInformationToJson() {\n        movieDao.saveAllMovies()\n        sessionDao.saveAllSessions()\n        ticketDao.saveAllSoldTickets()\n    }\n\n    fun initialFillingOfFiles() {\n        movieDao.fillingMoviesData()\n        ticketDao.fillingSoldTicketsData()\n        sessionDao.fillingSessionsData()\n    }\n\n    private fun prettyTicketsOutput(array: List<TicketEntity>, status: Boolean) {\n        val condition = if (status) \"purchased\" else \"available for purchase\"\n        for (index in array.indices) {\n            val activation = if (array[index].activation) \"activated\" else \"not activated\"\n            println(\"Ticket for the session(ID): ${array[index].sessionID}; seat number: ${array[index].seatNumber}; ticket status: $condition; activation status: $activation.\")\n        }\n    }\n\n    fun prettySessionsOutput() {\n        for (index in sessionDao.getAllSessions().indices) {\n            println(\"Session ID: ${sessionDao.getAllSessions()[index].id}; movie: ${sessionDao.getAllSessions()[index].movie}; time start: ${sessionDao.getAllSessions()[index].timeStart}\")\n        }\n    }\n}
===================================================================
diff --git a/src/main/kotlin/ru/hse/cinema/CinemaApp.kt b/src/main/kotlin/ru/hse/cinema/CinemaApp.kt
--- a/src/main/kotlin/ru/hse/cinema/CinemaApp.kt	
+++ b/src/main/kotlin/ru/hse/cinema/CinemaApp.kt	
@@ -14,6 +14,7 @@
     private val sessionDao: SessionDao,
 ) {
     // TODO В дальнейшем надо реализовать просмотр возможности редактирования продолжительность фильма (чтобы не повлияло на сессии)
+    // TODO Также разработать возможность удаления существующих сессий
     private fun checkCorrectSessionTime(title: String, date: LocalDateTime): Boolean {
         for (index in 0..<sessionDao.getAllSessions().size) {
             if ((sessionDao.getAllSessions()[index].timeStart.plusMinutes(movieDao.returnMovieByName(title).duration.toLong()) > date && (date > sessionDao.getAllSessions()[index].timeStart)) || ((date < sessionDao.getAllSessions()[index].timeStart) && (date.plusMinutes(
